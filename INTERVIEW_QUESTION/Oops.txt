(1)What is Object-Oriented Programming (OOP):
Ans:
    Object-Oriented Programming is a programming paradigm that organizes code into objects, which are instances of classes. It revolves around the concept of encapsulation, inheritance, and polymorphism, allowing developers to model real-world entities and their interactions.

(2)What is a module in Python?
Ans:
    A module in Python is a file containing Python code, which can include variables, functions, and classes. Modules allow code organization and 
    reuse by providing a way to group related functionalities together.

    Built-in Modules:
        These are modules that come pre-installed with Python and are part of the standard library. 
        
        Ex: import math
            import os

    Third-Party Modules:
        Modules developed by third-party developers and not part of the Python standard library. They can be installed using package managers like pip.
        Ex: # Installing a third-party module using pip
            import requests

    Custom/User-Defined Modules:
        Modules created by the user to organize and reuse their code across different scripts.

(3)What is __init__?

Ans:  
    __init__ is a special method in Python classes that is automatically called when an instance of the class is created. 

    Example:

    class Car:
        def __init__(self, make, model, year):
            self.make = make
            self.model = model
            self.year = year

    # Creating an instance of the Car class
    my_car = Car(make="Toyota", model="Camry", year=2022)

(4) Python class and functions?
Ans: 
    A Class is like an object constructor or Real world object, or a "blueprint" for creating objects.

    Example:
    class Dog:
        def __init__(self, name):
            self.name = name

        def bark(self):
            print(f"{self.name} says Woof!")

    my_dog = Dog("Buddy")

    A function is a piece of code that is written once and can be executed whenever the program calls for it. An example of a function definition in Python is as follows:

    Example:

    def add(x, y):
        return x + y

(5) What are instance and class variables?
Ans: 
    Instance variables in Python are variables that are unique to each instance (object) of a class. They represent the characteristics or attributes of individual objects.

    Example:
        class Car:
            def __init__(self, brand, model):
                self.brand = brand    # Instance variable
                self.model = model    # Instance variable

    Class variables in Python are shared among all instances of a class. They are defined at the class level and represent properties that are common to all objects of the class.

    Example:
        class Circle:
        # Class variable
        pi = 3.14

        def __init__(self, radius):
            self.radius = radius    # Instance variable


(6) What are static and class methods
Ans:
    Static methods in Python are methods that belong to a class rather than an instance. They do not have access to instance-specific data and are often used for utility functions.

    Example:
        class MathOperations:
            @staticmethod
            def add(x, y):
                return x + y

        result = MathOperations.add(3, 4)

    Class methods in Python are methods that are bound to a class rather than an instance. They have access to the class itself and are suitable for operations involving class-level attributes.

    Example:
        class Employee:
            total_employees = 0

            def __init__(self, name):
                self.name = name
                Employee.total_employees += 1

            @classmethod
            def get_total_employees(cls):
                return cls.total_employees

        emp1 = Employee("Alice")
        emp2 = Employee("Bob")

        total = Employee.get_total_employees()

(7)What we can assign Multiple Constructor in python?
Ans:
    Yes, we can assign multiple constructor in python but it's not recommended.

    class Animal:
    def __init__(self,*args):
        if len(args)==1:
            self.name = args[0]
        elif len(args)==2:
            self.name = args[0]
            self.species = args[1]
        elif len(args)==3:
            self.name = args[0]
            self.species = args[1]
            self.age = args[2]

    def make_sound(self, sound):
        return "The animal is {} and says {}".format(self.name, sound)

dog=Animal("dog","mammals",17)
print(dog.name)
print(dog.species)
print(dog.age)
print(dog.make_sound("woof wwoof"))

(8)Inheritance in python?
Ans:

### 1. Initializing the Parent Class in Subclass:
class Vehicle:
    def __init__(self, brand):
        self.brand = brand

    def start_engine(self):
        print(f"The {self.brand} vehicle's engine starts")

class Car(Vehicle):
    def __init__(self, brand, model):
        super().__init__(brand)
        self.model = model

    def drive(self):
        print(f"The {self.brand} {self.model} is now driving")

my_car = Car("Toyota", "Camry")
my_car.start_engine()  # Output: The Toyota vehicle's engine starts
my_car.drive()         # Output: The Toyota Camry is now driving
```

### 2. Overriding Methods in Subclass:
class Employee:
    def work(self):
        print("Employee is working")

class Manager(Employee):
    def work(self):
        super().work()
        print("Manager is overseeing the work")

manager = Manager()
manager.work()
# Output:
# Employee is working
# Manager is overseeing the work

### 3. Multiple Inheritance:

class Person:
    def __init__(self, name):
        self.name = name

    def greet(self):
        print(f"Hello, I'm {self.name}")

class SpeakerMixin:
    def speak(self):
        print("Speaking at an event")

class WalkerMixin:
    def walk(self):
        print("Taking a stroll")

class SpeakerWalkerPerson(Person, SpeakerMixin, WalkerMixin):
    def __init__(self, name):
        super().__init__(name)

speaker_walker = SpeakerWalkerPerson("Alice")
speaker_walker.greet()  # Output: Hello, I'm Alice
speaker_walker.speak()  # Output: Speaking at an event
speaker_walker.walk()   # Output: Taking a stroll

### 4.Multiple Inheritance:

class DatabaseConnection:
    def connect(self):
        print("Connecting to the database")

class LoggingMixin:
    def log_activity(self):
        print("Logging database activity")

class EncryptionMixin:
    def encrypt_data(self):
        print("Encrypting sensitive data")

class SecureDatabaseConnection(DatabaseConnection, LoggingMixin, EncryptionMixin):
    def connect(self):
        super().connect()
        print("Using a secure connection")

secure_connection = SecureDatabaseConnection()
secure_connection.connect()

# Output:
# Connecting to the database
# Using a secure connection
secure_connection.log_activity()   # Output: Logging database activity
secure_connection.encrypt_data()    # Output: Encrypting sensitive data
