(1)How to create Json file in django?
(2)Decorators in django?
(3)What is singal in django?


(1)How to create Json file in django?

import json
from django.http import JsonResponse

def create_json_file(request):
    # Define sample data
    data = {
        'name': 'John Doe',
        'age': 30,
        'city': 'New York'
    }

    # Serialize the data to JSON format
    json_data = json.dumps(data, indent=4)

    # Define the file path where you want to save the JSON file
    file_path = '/path/to/your/file/data.json'  # Update this with your desired file path

    # Write the JSON data to the file
    with open(file_path, 'w') as json_file:
        json_file.write(json_data)

    # Optionally, you can return a JSON response indicating the file creation status
    return JsonResponse({'message': 'JSON file created successfully'})


(2)Decorators in django?
Ans:
    Decorators in Django are typically used to modify the behavior of views, such as adding authentication checks, logging, or caching.

    from functools import wraps
    from django.http import HttpResponseForbidden

    def user_authenticated(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if request.user.is_authenticated:
                # User is authenticated, call the original view function
                return view_func(request, *args, **kwargs)
            else:
                # User is not authenticated, return a forbidden response
                return HttpResponseForbidden("You must be logged in to access this page.")
        return _wrapped_view

(3)What is singal in django?
Ans:
    In Django, signals are a mechanism for allowing certain senders to notify a set of receivers when some action has taken place. 
    This allows decoupled applications to get notified when certain actions occur elsewhere in the codebase.
    
    # Example
    from django.db.models.signals import post_save
    from django.dispatch import receiver
    from myapp.models import MyModel

    @receiver(post_save, sender=MyModel)
    def my_handler(sender, instance, created, **kwargs):
        if created:
            print("A new instance of MyModel was created:", instance)
        else:
            print("An existing instance of MyModel was updated:", instance)

(4)How can you combine multiple querysets in a view?

(5)Expalin Django Architecture?

(6)Proccess of handling request in Django?
Ans:
    User-Request:    manage.py -> settings.py -> urls.py -> views.py -> models.py -> template

(7)Why django is loosely couple?
Ans:
    Django is called a loosely coupled framework because of its MVT architecture

(8)Migration in django?
Ans:
    Migration in Django is to make changes to our models like deleting a model, adding a field, etc. into your database schema.

    makemigration - This command is used to create a migration file.
    migrate - This command creates a table according to the schema defined in migration file.
    showmigrations - This command list all the migrations and their status.
    sqlmigrate - This command is used to show a raw SQL query of the applied migration.

(9)What is CSRF?
Ans:
    CSRF stands for Cross Site Request Forgery. 
    The csrf_token is used for protection against Cross-Site Request Forgeries.

(10)What Is A QuerySet In Django?
Ans:
    A QuerySet in Django is basically a collection of objects from our database.

(11)What Is The Difference Between select_related & prefetch_related?
Ans:
    select_related:
        select_related() is used for single objects and forward relationships.
        Optimizes queries involving forward relationships, such as ForeignKey fields on the current model.
        It's best used when the related data is small and will be accessed frequently.

    prefetch_related:
        prefetch_related() is used for many objects and reverse relationships.
        Optimizes queries involving reverse relationships, such as ForeignKey, OneToOneField, and ManyToManyField.
        It's best used when the related data is large or will only be accessed occasionally
        
(12)What Is The Difference Between Flask, Pyramid And Django?
Ans:
    Flask is a "microframework" primarily build for a small application with simpler requirements. In flask, you have to use external libraries. Flask is ready to use.

    Pyramid are build for larger applications. It provides flexibility and lets the developer use the right tools for their project. The developer can choose the database, URL structure, templating style and more. Pyramid is heavy configurable.

    Django can also used for larger applications. It includes an ORM.

(13)Explain Django Admin & Django Admin Interface.
Ans:
    Django Admin Panel:
        Django admin panel is a kind of graphical user interface that is used for administrative tasks. 
        Django comes with a fully customizable in-built admin interface.
        Managing multiple models and permissions.

    Django-admin:
        It  is the command-line utility of Django for administrative tasks. 
        django-admin startapp
        django-admin test
        django-admin migrate

(14)WHat is the django short-cut method to more easily render an html response?
Ans:
    render_to_response

(15)Explain Q objects in Django ORM?
Ans:
    Q object django.db.models.Q is an object to encapsulate a collection of keyword arguments specified as FIELD LOOKUPS.
    Q objects are used to write complex queries, as in filter() functions just "AND" the conditions while if you want to "OR" the conditions you can use Q objects. 

    from django.db import models
from django.db.models import Q

Ex:
Models.objects.get( Q(question__startswith='When'), Q(answer__startswith='On')  | Q(answer__startswith='At') )


(16)What Is The Significance Of manage.py File In Django?
Ans:
    The manage.py file is automatically generated whenever you create a project. 
    This is basically a command-line utility that helps you to interact with your Django project in various ways.

(17)What Is A Middleware In Django?
Ans:
    Middleware is something that executes between the request and response. 
    In simple words, you can say it acts as a bridge between the request and response. 

    MIDDLEWARE = [  
    'django.middleware.security.SecurityMiddleware',  
    'django.contrib.sessions.middleware.SessionMiddleware',  
    'django.middleware.common.CommonMiddleware',  
    'django.middleware.csrf.CsrfViewMiddleware',  
    'django.contrib.auth.middleware.AuthenticationMiddleware',  
    'django.contrib.messages.middleware.MessageMiddleware',  
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  
    ]  

(18)What Is Sessions In Django?
Ans:
    Sessions are the mechanism used by Django for keeping track of the "state" between the site and a particular browser.

(19)What Are Django Exceptions?
Ans:
    In Django, exceptions are errors or unexpected conditions that occur during the execution of a web application built with Django framework.
    Django provides a variety of built-in exceptions that cover different aspects of web development, ranging from database errors to HTTP-related errors.

(20)What Is The Difference Between Django OneToOneField & ForeignKey Field?
Ans:


(21)Explain Django Field Class And Its Types?
Ans:

(22)What is jinja templating?
Ans:

(23)What is Serialization?
Ans:   
    Serialization in Django refers to the process of converting complex data types, such as querysets or model instances, into native Python data types that can be easily rendered into JSON, XML, or other content types.
    Ex:
        # Serializing a queryset or model instance
        book = Book.objects.get(pk=1)
        serializer = BookSerializer(book)
        serialized_data = serializer.data
        print(serialized_data)

    Deserialization is process of converting JSON, XML, or other content types in to querysets or model instances.
    Ex:
        data = {'title': 'Sample Title', 'author': 'Sample Author', 'publication_date': '2024-03-19'}
        serializer = BookSerializer(data=data)
        if serializer.is_valid():
            book_instance = serializer.save()
            print("Saved book:", book_instance)
        else:
            print("Errors:", serializer.errors)

    There are types of Serializers:
        (1)ModelSerializer:
            It automatically generates serializer fields based on the fields of a Django model.

        (2)HyperlinkedModelSerializer:
            It's useful for creating hypermedia APIs where clients navigate between resources using links.
        (3)BaseSerializer:
            It's typically used when creating custom serializers with highly specialized requirements.

(24)What Are Generic Views and API View?
Ans:
    Generic Views:
        Generic Views are pre-implemented views provided by Django REST Framework that offer commonly needed functionalities for CRUD (Create, Read, Update, Delete) operations.
        They are built on top of Django's class-based views and are designed to reduce code duplication and improve readability.

        Some common generic views provided by DRF include:

        GenericAPIView: The base class for all generic views.
        ListAPIView: Provides read-only list functionality.
        RetrieveAPIView: Provides read-only single object retrieval.
        CreateAPIView: Provides create functionality.
        UpdateAPIView: Provides update functionality.
        DestroyAPIView: Provides delete functionality.
        ListCreateAPIView: Combines list and create functionalities.
        RetrieveUpdateAPIView: Combines retrieve and update functionalities.
        RetrieveDestroyAPIView: Combines retrieve and delete functionalities.
        RetrieveUpdateDestroyAPIView: Combines retrieve, update, and delete functionalities.

        Ex:
            from rest_framework.generics import ListAPIView
            class BookList(ListAPIView):

    APIView:
        APIView is a base class provided by Django REST Framework for creating views that handle HTTP requests.
        With APIView, you define methods (e.g., get(), post(), put(), delete()) to handle specific HTTP methods. This gives you complete control over how requests are processed and responses are generated.
        Ex:
            from rest_framework.views import APIView

            class BookList(APIView):
                def get(self, request):
                    books = Book.objects.all()
                    serializer = BookSerializer(books, many=True)
                    return Response(serializer.data)

                def post(self, request):
                    serializer = BookSerializer(data=request.data)
                    if serializer.is_valid():
                        serializer.save()
                        return Response(serializer.data, status=status.HTTP_201_CREATED)

(25)What Is Mixin?
Ans:
    In Django, mixins are classes that provide additional functionalities which can be mixed into other classes.
    They are commonly used to share common functionalities across different classes without the need for multiple inheritance, which can lead to complexity and potential issues like the diamond problem.

    Mixins are particularly useful in Django's class-based views (CBVs) and provide a way to modularize and reuse code. 

    Ex:
        # mixins.py
        class TimestampMixin:
            created_at = models.DateTimeField(auto_now_add=True)
            updated_at = models.DateTimeField(auto_now=True)

            def get_creation_date(self):
                return self.created_at.strftime('%Y-%m-%d')

            def get_update_date(self):
                return self.updated_at.strftime('%Y-%m-%d')

        # models.py
        from django.db import models
        from .mixins import TimestampMixin

        class MyModel(TimestampMixin, models.Model):
            name = models.CharField(max_length=100)
            description = models.TextField()

(26)What is caching?
Ans:
    caching is use for store frequently accessed data in memory and reduce the need for expensive computations or database queries.

(27)How can you implement user permissions and access control in Django?
Ans:
    Built-in permissions: Django includes a set of built-in permissions, such as add, change, and delete, which can be assigned to users or groups at the model level. 
    Permissions checks in views: Developers can use built-in decorators (@permission_required, @user_passes_test) or mixins (PermissionRequiredMixin) to restrict access to views based on user permissions. These decorators and mixins allow developers to enforce fine-grained access control rules at the view level.
    Object-level permissions: Django supports object-level permissions, which allow developers to define custom access control rules based on the properties of individual model instances. Developers can implement object-level permissions by overriding the has_perm() method on model instances or by using third-party packages such as django-guardian.
    Custom permission checks: Developers can implement custom permission checks by defining custom authorization logic in view functions or by subclassing Django's permission classes (BasePermission, Permission, ModelPermission, etc.). Custom permission checks provide flexibility to implement complex access control rules tailored to the specific requirements of an application.

(28)permission class?
Ans:
    Django Rest Framework (DRF), permissions are used to control access to different parts of your API. They determine whether a user is allowed to perform a certain action on a particular resource. 

    Built-in permission classes: DRF comes with several built-in permission classes that you can use to control access to your API views. Some of the common built-in permission classes include:

        AllowAny: The AllowAny permission class will allow unrestricted access, regardless of if the request was authenticated or unauthenticated
        IsAuthenticated: Allows access only to authenticated users.
        IsAdminUser: Allows access only to admin users.
        IsAuthenticatedOrReadOnly: Allows read access to unauthenticated users and write access to authenticated users only.

(29)Throttling
Ans:
    Throttling in Django Rest Framework (DRF) is a mechanism used to limit the number of requests that a client can make to an API within a certain period of time. Throttling helps prevent abuse and ensures fair usage of the API's resources. 

    (1)AnonRateThrottle: This throttle class is used to limit the rate of requests from unauthenticated users. You can specify the rate limit as the number of requests allowed per minute, hour, or day.

    (2)UserRateThrottle: Similar to AnonRateThrottle, but this class limits the rate of requests for authenticated users. You can set different rate limits based on the authenticated user's ID or any other attribute.

    (3)ScopedRateThrottle: This throttle class allows you to set different rate limits for different groups of users or views. You can define custom scope names for different views or groups of views, and then set rate limits for each scope.
    

(30)values and value_list:
Ans:
    In Django's ORM (Object-Relational Mapping), values() and values_list() are query set methods used to retrieve data from the database in a specific format.
    
    Values:
        The values() method returns a QuerySet that returns dictionaries.

    Value_list: 
        The values_list() method returns a QuerySet that returns tuples   
    

(31)APIView vs Viewset?
Ans:
    APIView is the functional base view and responds to a single HTTP request.
    Viewset handles multiple HTTP requests.

(32)Signal vs Celary?

(33)Celary workers vs Celary beat?

(34)What is Template Inheritance?
Ans:
    Jijna template --> where we are create idivudal file instead of create seprate file for header,foot,main etc and inherit in other page for use directly.

(35)What does url_for do in Flask?
Ans:
    The url_for() method is used to generate a URL to a specific function dynamically. 

(36)How do you handle cookies in a Flask?
Ans:
    The set_cookie() method on the response object in Flask is used to set cookies.

(37)Can you name some companies that use Django?
Ans:    
    DISCUS, Instagram, Mozilla Firefox, Pinterest, Reddit, YouTube

(38)Why do web developers prefer Django?
Ans: 
    Allows code modules to be divided into logical groups, making them flexible to change
    Provides an auto-generated web admin module to ease website administration
    Provides a pre-packaged API for common user tasks
    Enables developers to define a given function’s URL
    Allows users to separate business logic from the HTML
    Is written in Python, one of the most popular programming languages available today
    Gives you a system to define the HTML template for your web page, avoiding code duplication

(39) Does Django have any drawbacks?
Ans:
    Everything hinges on Django’s ORM (Object-Relational Mapping).
    Everything must be explicitly defined due to a lack of convention.
    Its monolithic size makes it unsuitable for smaller projects.

(40)List several caching strategies supported by Django?
Ans:
    Database caching
    In-memory caching
    File System Caching
    Memcached 

(41)

    Advanced:

    (1)What are Django forms, and why are they useful?
    (2)Explain form validation in Django?
    (3)Describe how user authentication works in Django?
    (4)What is the Django authentication middleware, and what does it do?
    (5)How can you implement user permissions and access control in Django?
    (6)Importance of Testing in Django Development?
    (7)Best Practices for Testing Django Applications?
    (8)Common Techniques for Optimizing Django Applications?
    (9)Caching Strategies in Django?
    (10)Profiling and Debugging Performance Issues in Django?
    (11)Common Security Vulnerabilities in Django Applications?
    (12)Preventing Common Security Threats in Django?
    (13)Best Practices for Securing Django Applications?

