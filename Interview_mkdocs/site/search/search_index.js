var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs gh-deploy</code> - Deploying to GitHub Pages.      </li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#docker-run","title":"Docker Run","text":"<pre><code>docker build -t mkdocs-site .\ndocker-compose up\n</code></pre>"},{"location":"index.html#header","title":"Header","text":"<pre><code># H1 Header\n## H2 Header\n### H3 Header\n#### H4 Header\n##### H5 Header\n###### H6 Header\n</code></pre>"},{"location":"index.html#bold","title":"Bold","text":"<pre><code>*Italic* or _Italic_\n**Bold** or __Bold__\n***Bold Italic*** or ___Bold Italic___\n</code></pre>"},{"location":"index.html#lists","title":"Lists","text":"<pre><code>## Unordered Lists:-\n    - Item 1\n    - Item 2\n      - Subitem 2.1\n      - Subitem 2.2\n    - Item 3\n\n## Ordered Lists:-\n    1. First item\n    2. Second item\n       1. Subitem 2.1\n       2. Subitem 2.2\n    3. Third item\n</code></pre>"},{"location":"index.html#links","title":"Links","text":"<pre><code>[Link Text](https://example.com \"Your Name\")\n\nFor Direct use link:\nVisit our site at https://example.com for more information.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"index.html#images","title":"Images","text":"<pre><code>![Alt Text](assets/images/logo.png)\n![Alt Text](assets/images/logo.png){ align=left }\n![Alt Text](assets/images/logo.png){ align=right }\n</code></pre>"},{"location":"index.html#code-blocks","title":"Code Blocks","text":"<pre><code>```python\ndef hello_world():\n    print(\"Hello, world!\")\n```\n</code></pre>"},{"location":"index.html#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; This is a blockquote.\n&gt; It can span multiple lines.\n</code></pre>"},{"location":"index.html#tables","title":"Tables","text":"<pre><code>| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Row 1    | Data     | Data     |\n| Row 2    | Data     | Data     |\n</code></pre>"},{"location":"index.html#admonitions","title":"Admonitions","text":"<p>Note Title</p> <p>This is a note.</p> <p>Warning Title</p> <p>This is a warning.</p>"},{"location":"index.html#footnotes","title":"Footnotes","text":"<pre><code>For more details, refer to the official documentation[^docs].\n\n[^docs]: [MkDocs Documentation](https://www.mkdocs.org/)\n</code></pre>"},{"location":"index.html#gif-load","title":"GIF Load","text":"<p>Here is an example square GIF:</p> <p></p> Image caption"},{"location":"index.html#video-load","title":"Video Load","text":"<p>Here is an example video:</p>    Your browser does not support the video tag."},{"location":"Database/mongodb.html","title":"Python Programming Concepts Documentation","text":""},{"location":"Database/mongodb.html#1-what-is-object-oriented-programming-oop","title":"1. What is Object-Oriented Programming (OOP)?","text":"<p>Answer:</p> <p>Object-Oriented Programming is a programming paradigm that organizes code into objects, which are instances of classes. It revolves around the concept of encapsulation, inheritance, and polymorphism, allowing developers to model real-world entities and their interactions.</p>"},{"location":"Database/mongodb.html#2-what-is-a-module-in-python","title":"2. What is a module in Python?","text":"<p>Answer:</p> <p>A module in Python is a file containing Python code, which can include variables, functions, and classes. Modules allow code organization and reuse by providing a way to group related functionalities together.</p>"},{"location":"Database/mongodb.html#types-of-modules","title":"Types of Modules:","text":"<ul> <li>Built-in Modules:   These are modules that come pre-installed with Python and are part of the standard library. </li> <li> <p>Example:     <code>import mathimport os</code></p> </li> <li> <p>Third-Party Modules:   Modules developed by third-party developers and not part of the Python standard library. They can be installed using package managers like <code>pip</code>.   Example:     <code>import requests</code></p> </li> <li> <p>Custom/User-Defined Modules:   Modules created by the user to organize and reuse their code across different scripts.</p> </li> </ul>"},{"location":"Database/mongodb.html#3-what-is-__init__","title":"3. What is <code>__init__</code>?","text":"<p>Answer:</p> <p><code>__init__</code> is a special method in Python classes that is automatically called when an instance of the class is created. </p> <ul> <li>Example: <pre><code>class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n# Creating an instance of the Car class\nmy_car = Car(make=\"Toyota\", model=\"Camry\", year=2022)\n</code></pre></li> </ul>"},{"location":"Database/mongodb.html#4-python-classes-and-functions","title":"4. Python Classes and Functions","text":"<p>Answer:</p> <ul> <li>Class:   A class is like an object constructor or a \"blueprint\" for creating objects.</li> <li> <p>Example: <pre><code>class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print(f\"{self.name} says Woof!\")\n\nmy_dog = Dog(\"Buddy\")\n</code></pre></p> </li> <li> <p>Function:   A function is a piece of code that is written once and can be executed whenever the program calls for it.</p> </li> <li>Example: <pre><code>def add(x, y):\n    return x + y\n</code></pre></li> </ul>"},{"location":"Database/mongodb.html#5-what-are-instance-and-class-variables","title":"5. What are Instance and Class Variables?","text":"<p>Answer:</p> <ul> <li>Instance Variables:   Instance variables in Python are variables that are unique to each instance (object) of a class. They represent the characteristics or attributes of individual objects.</li> <li> <p>Example: <pre><code>class Car:\n    def __init__(self, brand, model):\n        self.brand = brand    # Instance variable\n        self.model = model    # Instance variable\n</code></pre></p> </li> <li> <p>Class Variables:   Class variables in Python are shared among all instances of a class. They are defined at the class level and represent properties that are common to all objects of the class.</p> </li> <li>Example: <pre><code>class Circle:\n    # Class variable\n    pi = 3.14\n\n    def __init__(self, radius):\n        self.radius = radius    # Instance variable\n</code></pre></li> </ul>"},{"location":"Database/mongodb.html#6-what-are-static-and-class-methods","title":"6. What are Static and Class Methods?","text":"<p>Answer:</p> <ul> <li>Static Methods:   Static methods in Python are methods that belong to a class rather than an instance. They do not have access to instance-specific data and are often used for utility functions.</li> <li> <p>Example: <pre><code>class MathOperations:\n    @staticmethod\n    def add(x, y):\n        return x + y\n\nresult = MathOperations.add(3, 4)\n</code></pre></p> </li> <li> <p>Class Methods:   Class methods in Python are methods that are bound to a class rather than an instance. They have access to the class itself and are suitable for operations involving class-level attributes.</p> </li> <li>Example: <pre><code>class Employee:\n    total_employees = 0\n\n    def __init__(self, name):\n        self.name = name\n        Employee.total_employees += 1\n\n    @classmethod\n    def get_total_employees(cls):\n        return cls.total_employees\n\nemp1 = Employee(\"Alice\")\nemp2 = Employee(\"Bob\")\n\ntotal = Employee.get_total_employees()\n</code></pre></li> </ul>"},{"location":"Database/mongodb.html#7-can-we-assign-multiple-constructors-in-python","title":"7. Can We Assign Multiple Constructors in Python?","text":"<p>Answer:</p> <p>Yes, we can assign multiple constructors in Python using variable-length arguments (<code>*args</code>), but it's not recommended.</p> <ul> <li>Example: <pre><code>class Animal:\n    def __init__(self,*args):\n        if len(args) == 1:\n            self.name = args[0]\n        elif len(args) == 2:\n            self.name = args[0]\n            self.species = args[1]\n        elif len(args) == 3:\n            self.name = args[0]\n            self.species = args[1]\n            self.age = args[2]\n\n    def make_sound(self, sound):\n        return \"The animal is {} and says {}\".format(self.name, sound)\n\ndog = Animal(\"dog\", \"mammal\", 17)\nprint(dog.name)        # Output: dog\nprint(dog.species)     # Output: mammal\nprint(dog.age)         # Output: 17\nprint(dog.make_sound(\"woof woof\"))  # Output: The animal is dog and says woof woof\n</code></pre></li> </ul>"},{"location":"Database/mongodb.html#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Documentation</li> <li>Replit: Try Python Online</li> </ul> <p>Try Python Online</p>"},{"location":"Database/sql.html","title":"SQL","text":"<p>SQL (Structured Query Language) is a domain-specific language used in programming and managing relational databases.</p>"},{"location":"Database/sql.html#features","title":"Features","text":"<ul> <li>Data definition</li> <li>Data manipulation</li> <li>Data control</li> </ul>"},{"location":"Framework/Django_Framework.html","title":"Django Framework Documentation","text":""},{"location":"Framework/Fastapi_Framework.html","title":"Fastapi Framework Documentation","text":""},{"location":"Framework/Flask_Framework.html","title":"Flask Framework Documentation","text":""},{"location":"ORM/django.html","title":"Django ORM","text":""},{"location":"ORM/django.html#1-create-table","title":"1. Create Table","text":"<pre><code>    from django.db import models\n\n    class MyModel(models.Model):\n        id = models.AutoField(primary_key=True)\n        name = models.CharField(max_length=100)\n        description = models.TextField()\n        email = models.EmailField()\n        age = models.IntegerField()\n        account_balance = models.DecimalField(max_digits=10, decimal_places=2)\n        height = models.FloatField()\n        is_active = models.BooleanField(default=False)\n        birth_date = models.DateField()\n        last_updated = models.DateTimeField()\n        appointment_time = models.TimeField()\n        website_url = models.URLField()\n        document_file = models.FileField(upload_to='uploads/')\n        profile_picture = models.ImageField(upload_to='images/')\n        related_model = models.ForeignKey('AnotherModel', on_delete=models.CASCADE)\n        related_models = models.ManyToManyField('YetAnotherModel')\n\n    class AnotherModel(models.Model):\n        # Define fields for AnotherModel\n        pass\n\n    class YetAnotherModel(models.Model):\n        # Define fields for YetAnotherModel\n        pass\n</code></pre>"},{"location":"ORM/django.html#2-select-data","title":"2. Select data","text":"<pre><code>User.objects.filter(gender='F')\n</code></pre>"},{"location":"ORM/django.html#3-operators","title":"3. Operators","text":"<ul> <li> <p>IN Operator:   The <code>IN</code> operator is used to filter querysets based on whether a field's value is within a given list of values.     <pre><code>    User.objects.filter(gender__in=['M', 'F'])\n</code></pre></p> </li> <li> <p>LIKE Operator: <pre><code>    matching_users = User.objects.filter(Q(name__icontains='John') | Q(email__icontains='example.com'))\n    for user in matching_users:\n        print(user.name, user.email)\n</code></pre></p> </li> </ul>"},{"location":"ORM/django.html#4-order-by","title":"4. ORDER BY","text":"<pre><code>asceding_ordered = User.objects.order_by('name') # Return asceding order record\ndescending_ordered = User.objects.order_by('-name') # Return descending order record\n</code></pre>"},{"location":"ORM/django.html#5-is-null-and-is-not-null","title":"5. IS NULL and IS NOT NULL","text":"<ul> <li> <p>IS NULL: <pre><code>    users_with_null_mobile = User.objects.filter(mobile__isnull=True)\n</code></pre></p> </li> <li> <p>IS NOT NULL: <pre><code>    users_with_mobile = User.objects.exclude(mobile__isnull=True)\n</code></pre></p> </li> </ul>"},{"location":"ORM/django.html#6-update-and-delete","title":"6. Update and Delete","text":"<ul> <li> <p>Update: <pre><code>    student = Student.objects.get(id=4)\n    student.age = 25\n    student.save()\n</code></pre></p> </li> <li> <p>Delete: <pre><code>    Student.objects.filter(id=4).delete()\n</code></pre></p> </li> </ul>"},{"location":"ORM/django.html#7-group-by-and-having","title":"7. GROUP BY and HAVING","text":"<ul> <li> <p>GROUP BY:     GROUP BY in Django ORM is achieved using the values() method to specify the fields you want to group your query results by. It organizes the results into groups based on one or more columns.     <pre><code>    Order.objects.values('customer_id').annotate(total_quantity=Sum('quantity'))\n</code></pre></p> </li> <li> <p>HAVING:     HAVING in Django ORM is performed using the annotate() method to calculate aggregates and then the filter() method to apply conditions on those aggregated results, similar to the SQL HAVING clause.     <pre><code>    Order.objects.values('customer_id').annotate(total_quantity=Sum('quantity')).filter(total_quantity__gt=100)\n</code></pre></p> </li> </ul>"},{"location":"ORM/flask.html","title":"Flask ORM","text":""},{"location":"ORM/flask.html#1-create-table","title":"1. Create Table","text":"<pre><code>from flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100))\n    email = db.Column(db.String(150))\n    password = db.Column(db.String(100))\n    mobile = db.Column(db.String(15))\n    gender = db.Column(db.Enum('M', 'F', 'O'))\n    dob = db.Column(db.Date)\n    status = db.Column(db.Boolean)\n</code></pre>"},{"location":"ORM/flask.html#1-select-data","title":"1. Select data","text":"<pre><code>User.query.filter_by(gender='F').all()\n</code></pre>"},{"location":"ORM/flask.html#2-operators","title":"2. Operators","text":"<ul> <li> <p>IN Operator:   The <code>IN</code> operator is used to filter querysets based on whether a field's value is within a given list of values.     <pre><code>    User.query.filter(User.gender.in_(['M', 'F'])).all()\n</code></pre></p> </li> <li> <p>LIKE Operator: <pre><code>    matching_users = User.query.filter(or_(User.name.ilike('%John%'), User.email.ilike('%example.com%'))).all()\n    for user in matching_users:\n        print(user.name, user.email)  # Accessing user attributes\n</code></pre></p> </li> </ul>"},{"location":"ORM/flask.html#3-order-by","title":"3. ORDER BY","text":"<pre><code>User.query.order_by(User.name.asc()).all() # Return asceding order record\nUser.query.order_by(User.name.desc()).all() # Return descending order record\n</code></pre>"},{"location":"ORM/flask.html#4-is-null-and-is-not-null","title":"4. IS NULL and IS NOT NULL","text":"<ul> <li> <p>IS NULL: <pre><code>    User.query.filter(User.mobile == null()).all()\n</code></pre></p> </li> <li> <p>IS NOT NULL: <pre><code>    User.query.filter(User.mobile.isnot(None)).all()\n</code></pre></p> </li> </ul>"},{"location":"ORM/flask.html#4-update-and-delete","title":"4. Update and Delete","text":"<ul> <li> <p>Update: <pre><code>    # Update the age for the student with id=4\n    student = Student.query.filter_by(id=4).first()\n    student.age = 25\n    db.session.commit()\n</code></pre></p> </li> <li> <p>Delete: <pre><code>    # Delete the student with id=4\n    student = Student.query.filter_by(id=4).first()\n    db.session.delete(student)\n    db.session.commit()\n</code></pre></p> </li> </ul>"},{"location":"ORM/flask.html#4-group-by-and-having","title":"4. GROUP BY and HAVING","text":"<ul> <li> <p>GROUP BY:     GROUP BY in SQLAlchemy ORM is achieved using the group_by() method to specify the fields you want to group your query results by. It organizes the results into groups based on one or more columns.   <pre><code>    from sqlalchemy import func\n\n    query = db.session.query(\n        Order.customer_id, func.sum(Order.quantity).label('total_quantity')\n    ).group_by(Order.customer_id)\n</code></pre></p> </li> <li> <p>HAVING:     HAVING in SQLAlchemy ORM is performed using the having() method to apply conditions on the aggregated results, similar to the SQL HAVING clause.     <pre><code>    from sqlalchemy import func\n    query = db.session.query(Order.customer_id, func.sum(Order.quantity).label('total_quantity'))\n            .group_by(Order.customer_id).having(func.sum(Order.quantity) &gt; 100)\n</code></pre></p> </li> </ul>"},{"location":"Practical/Most_ask_python_practical.html","title":"Most Ask Python Practical in Interview","text":""},{"location":"Practical/Most_ask_sql_practical.html","title":"Most Ask Sql Practical in Interview","text":""},{"location":"Practical/Data_type/dict.html","title":"Python Dictinory Practical for Interview","text":""},{"location":"Practical/Data_type/list.html","title":"Python List Practical for Interview","text":""},{"location":"Practical/Data_type/list.html#1-pythonic-element-exclusion-a-comparative-analysis-of-list-comprehension-and-iterative-removal","title":"1. Pythonic Element Exclusion: A Comparative Analysis of List Comprehension and Iterative Removal?","text":"<p>Answer: <pre><code>    my_list = [32, 4, 12, 5, 7, 6, 8, 9]\n    new_list = [4, 6]\n\n    # Using list comprehension for element exclusion\n    result = [value for value in my_list if value not in new_list]\n    print(\"Result using List Comprehension:\", result)\n\n    # Remove elements from the list iteratively\n    for i in new_list:\n        my_list.remove(i)  # Remove element\n        # del my_list[i]  # Remove element by index\n\n    print(\"Result after Iterative Removal:\", my_list)\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#2-add-elements-to-a-list-at-specific-indices","title":"2. Add Elements to a List at Specific Indices?","text":"<p>Answer: <pre><code>    original_list = [10, 20, 30, 40, 50]\n\n    # Elements to be added\n    elements_to_add = [15, 25]\n\n    # Indices where elements will be added\n    indices_to_add = [2, 4]\n\n    # Add elements at specific indices\n    for index,element in zip(indices_to_add,elements_to_add):\n        original_list.insert(index, element)\n\n    # Display the modified list\n    print(\"List after adding elements:\", original_list)\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#3-get-sum-of-even-and-odd-numbers-in-a-list","title":"3. Get sum of even and odd numbers in a list?","text":"<p>Answer: <pre><code>    original_list = [10, 19, 30, 40, 53,60,70,80]\n\n    def odd_even_sum(original_list):\n        even_num = 0\n        odd_num = 0\n\n        for i in original_list:\n            if i % 2 == 0:\n                even_num += i\n            else:\n                odd_num += i\n\n        return f\"Even Number sum is:{even_num}\", f\"Odd number sum is:{odd_num}\"\n\n    even,odd = odd_even_sum(original_list)\n\n    print(even,odd)\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#4-flatten-a-list-of-lists","title":"4. Flatten a list of lists?","text":"<p>Answer: <pre><code>    original_list = [10, 20,[ 30, 40,[50, 60, 70], 80], 50,60,[12,13,14,15],70,80]\n    new_list = []\n    for  i in original_list:\n        if type(i) == list:\n            for j in i:\n                if type(j) == list:\n                    for k in j:\n                        new_list.append(k)\n                new_list.append(j)\n        else:\n            new_list.append(i)\n\n    print(new_list)\n\n    # Second Approch\n    def flatter_list(my_list):\n        new_list = []\n        for element in my_list:\n            if isinstance(element,list):\n                new_list.extend(flatter_list(element))\n            else:\n                new_list.append(element)\n\n        return new_list\n\n    print(flatter_list(my_list))\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#5-list-comprehension","title":"5. List Comprehension?","text":"<p>Answer: <pre><code>    my_list = [2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Power of 2 numbers\n    result = [x**2 for x in my_list]\n    print(f\"Power of 2 numbers:{result}\")\n\n    # Even numbers\n    result = [x for x in my_list if x % 2 == 0]\n    print(f\"Even numbers:{result}\")\n\n    # Odd numbers\n    result = [x for x in my_list if x % 2 != 0]\n    print(f\"Odd numbers: {result}\")\n\n    # Numbers divisible by 3\n    result = [x for x in my_list if x % 3 == 0]\n    print(f\"Numbers divisible by 3: {result}\")\n\n    # Flattering list\n    my_list = [[1, 2], [3, 4], [5, 6]]\n    result = [x for sublist in my_list for x in sublist]\n    print(f\"Flattening list: {result}\")\n\n    # Get first letter from list of strings\n    my_list = [\"apple\", \"banana\", \"cherry\"]\n    result = [x[0] for x in my_list]\n    print(f\"Your first latter of string is: {result}\")\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#6-sort-element-in-list-using-decorator","title":"6. Sort element in list using decorator?","text":"<p>Answer: <pre><code>    def sort_decorator(func):\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n            if isinstance(result, list):\n                return sorted(result)\n            else:\n                return result\n        return wrapper\n\n    @sort_decorator\n    def get_numbers(my_list):\n        return my_list\n\n    my_list = [3,2,4,6,3,56,7,8,5,3,3,5]\n    print(get_numbers(my_list))\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#7-list-element-rotation-program-based-on-provide-lenght-of-index","title":"7. List element Rotation Program based on provide lenght of index?","text":"<p>Answer: <pre><code>    my_list = [1, 2, 3, 4, 5, 6]\n\n    def rotate_list(my_list, n):\n        result = my_list[-n:] + my_list[:-n]\n\n        return result\n\n    print(rotate_list(my_list, 2))  # Output: [5, 6, 1, 2, 3, 4]\n    print(rotate_list(my_list, 3))  # Output: [4, 5, 6, 1, 2, 3]\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#8-swap-two-elements-in-a-list-using-enumerate","title":"8. Swap Two Elements in a List Using enumerate","text":"<p>Answer: <pre><code>    def swapvalue(list,pos1,pos2):\n        for i,x in enumerate(list):\n            if i == pos1:\n                element1 = x\n            if i == pos2:\n                element2 = x\n        list[pos1] = element2\n        list[pos2] = element1\n\n        return list\n\n    my_list = [61,24,12,16]\n    pos1,pos2=1,2\n\n    print(swapvalue(my_list,pos1-1,pos2-1))\n</code></pre></p>"},{"location":"Practical/Data_type/list.html#9-remove-duplicates-from-the-list-using-list-comprehension","title":"9. Remove duplicates from the list using list comprehension","text":"<p>Answer: <pre><code>    my_list = [2,3,36,6,3,6,8,9,8,5,9,6,9,3]\n\n    new_list = []\n\n    result = [new_list.append(x) for x in my_list if x not in new_list]\n\n    print(my_list)\n</code></pre></p>"},{"location":"Practical/Data_type/string.html","title":"Python String Practical for Interview","text":""},{"location":"Practical/Data_type/string.html#1-reverse-a-string","title":"1. Reverse a String","text":"<p>Answer: <pre><code>    def reverse_string(my_String):\n        res = \"\"\n        for i in my_String:\n            res = i + res\n        return res\n\n    print(\"Reverse a String:\",reverse_string(\"Dhruvish patel\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#2-write-a-python-program-to-count-the-number-of-vowels-in-a-string","title":"2. Write a Python program to count the number of vowels in a string","text":"<p>Answer: <pre><code>    def count_vowels(input_string):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in input_string if char in vowels)\n\n    print(\"Count of vowls are:\",count_vowels(\"Dhruvish patel\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#3-write-a-python-program-to-find-the-most-frequent-character-in-a-string","title":"3. Write a Python program to find the most frequent character in a string","text":"<p>Answer: <pre><code>    def most_frequent(my_String):\n        my_dict = {}\n        for i in str(my_String).replace(\" \",\"\"):\n            if i in my_dict:\n                my_dict[i] += 1\n            else:\n                my_dict[i] = 1\n        result = max(my_dict,key=my_dict.get)\n\n        return result\n\n    print(\"most frequent character is:\",most_frequent(\"DDhruvish patel\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#4-write-a-python-program-to-find-the-all-most-frequent-character-in-a-string","title":"4. Write a Python program to find the all most frequent character in a string","text":"<p>Answer: <pre><code>    def all_max_frequent(input_string):\n        new_dict = {}\n        max_frequent = 0\n        for i in input_string:\n            if i in new_dict:\n                new_dict[i] += 1\n            else:\n                new_dict[i] = 1\n\n            max_frequent = max(max_frequent,new_dict[i])\n\n        result = [key for key,value in new_dict.items() if value == max_frequent]\n\n        return result\n    print(all_max_frequent(\"Dhruvish from ahmedabad\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#5-write-a-python-program-to-remove-all-duplicates-from-a-string-and-return-the-result","title":"5. Write a Python program to remove all duplicates from a string and return the result","text":"<p>Answer: <pre><code>    def remove_duplicate(my_string):\n        new_string = \"\"\n        for i in my_string:\n            if i not in new_string:\n                new_string += i\n\n        print(new_string)\n\n    remove_duplicate(\"Dhruvish pattel\")\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#6-write-a-python-program-to-remove-first-duplicates-from-a-string-and-return-the-result","title":"6. Write a Python program to remove first duplicates from a string and return the result","text":"<p>Answer: <pre><code>    def remove_first_duplicate(string):\n        seen = set()\n        output = ''\n        duplicate = False\n        for char in string:\n            if char not in seen:\n                seen.add(char)\n                output += char\n            elif not duplicate:\n                duplicate = True\n            else:\n                output += char\n        return output\n    string = \"abcddefgghijjd\"\n    print(remove_first_duplicate(string)) # output abcdefgghijjd\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#7-word-capitalizer","title":"7. Word Capitalizer","text":"<p>Answer: <pre><code>    def capitalize_first_letter_in_each_word(sentence):\n        capitalized_words = []\n        for word in sentence.split():\n\n            capitalized_words.append(word.capitalize())\n\n        return ' '.join(capitalized_words)\n\n    # Test the function\n    input_sentence = \"dhruvish Patel from ahmedabad\"\n    result = capitalize_first_letter_in_each_word(input_sentence)\n    print(result)\n\n    # Other sort way\n\n    def capitalize_first_letter_in_each_word(sentence):\n        capitalized_words = sentence.title()\n\n        return capitalized_words\n\n    # Test the function\n    input_sentence = \"dhruvish Patel from ahmedabad\"\n    result = capitalize_first_letter_in_each_word(input_sentence)\n    print(result)\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#8-write-a-python-program-to-count-the-number-of-occurrences-of-a-specific-substring-in-a-string","title":"8. Write a Python program to count the number of occurrences of a specific substring in a string","text":"<p>Answer: <pre><code>    def count_substring(string, substring):\n        return string.count(substring)\n\n    # Usage\n    string = \"Hello, world! The world is round.\"\n    substring = \"world\"\n    count = count_substring(string, substring)\n    print(f\"The substring '{substring}' appears {count} times in the string.\")\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#9-write-a-python-program-to-find-first-non-repeated-char","title":"9. Write a Python program to find first non repeated char","text":"<p>Answer: <pre><code>    def first_non_repeated_char(input_string):\n        char_count_dict = {}\n\n        # Count occurrences of each character\n        for char in input_string:\n            if char in char_count_dict:\n                char_count_dict[char] += 1\n            else:\n                char_count_dict[char] = 1\n\n        # Find the first non-repeated character\n        for char, count in char_count_dict.items():\n            if count == 1:\n                return char, count\n\n        return None, None  # Return None if there is no non-repeated character\n\n    # Example usage:\n    input_string = \"Dhruvish Patel\"\n    result_char, result_count = first_non_repeated_char(input_string)\n\n    if result_char is not None:\n        print(f\"The first non-repeated character is '{result_char}' with a count of {result_count}.\")\n    else:\n        print(\"No non-repeated characters found.\")\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#10-write-a-python-program-to-get-a-string-made-of-the-first-2-and-last-2-characters-of-a-given-string-if-the-string-length-is-less-than-2-return-the-empty-string-instead","title":"10. Write a Python program to get a string made of the first 2 and last 2 characters of a given string. If the string length is less than 2, return the empty string instead","text":"<p>Answer: <pre><code>    # Sample String : 'w3resource'\n    # Expected Result : 'w3ce'\n    # Sample String : 'w3'\n    # Expected Result : 'w3w3'\n    # Sample String : ' w'\n    # Expected Result : Empty String\n\n    def remove_ele(input_string):\n        if len(input_string) &lt; 2:\n            return ''\n        else:\n            return input_string[0:2] + input_string[-2:]\n\n    print(remove_ele(\"Dhruvish\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#11-write-a-python-program-to-get-a-single-string-from-two-given-strings-separated-by-a-space-and-swap-the-first-two-characters-of-each-string","title":"11. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string","text":"<p>Answer: <pre><code>    # Sample String : 'abc', 'xyz'\n    # Expected Result : 'xyc abz'\n    def chars_mix_up(a, b):\n        new_a = b[:2] + a[2:]\n        new_b = a[:2] + b[2:]\n\n        return new_a + ' ' + new_b\n\n    print(chars_mix_up('abc', 'xyz'))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#12-write-a-python-program-to-add-ing-at-the-end-of-a-given-string-length-should-be-at-least-3-if-the-given-string-already-ends-with-ing-add-ly-instead-if-the-string-length-of-the-given-string-is-less-than-3-leave-it-unchanged","title":"12. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged","text":"<p>Answer: <pre><code>    # Sample String : 'abc'\n    # Expected Result : 'abcing'\n    # Sample String : 'string'\n    # Expected Result : 'stringly'\n\n    def get_respone(input_result):\n        if input_result[-3:] == 'ing':\n            input_result += 'ly'\n        else:\n            input_result += 'ing'\n\n        return input_result\n\n    print(get_respone('abc'))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#13-removes-the-character-at-the-specified-index-from-the-input-string","title":"13. Removes the character at the specified index from the input string","text":"<p>Answer: <pre><code>    def string_length(input_result,n):\n        first_char = input_result[:n]\n        last_char = input_result[n+1:]\n\n        return first_char + last_char\n\n    print(string_length(\"Dhruvish\",2))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#14-write-a-python-program-to-change-a-given-string-to-a-newly-string-where-the-first-and-last-chars-have-been-exchanged","title":"14. Write a Python program to change a given string to a newly string where the first and last chars have been exchanged","text":"<p>Answer: <pre><code>    def swap_alpha(input_result):\n\n        return input_result[-1] + input_result[1:-1] + input_result[:1]\n\n    print(swap_alpha(\"Dhruvish\"))\n</code></pre></p>"},{"location":"Practical/Data_type/string.html#15-write-a-python-program-to-remove-characters-that-have-odd-index-values-in-a-given-string","title":"15. Write a Python program to remove characters that have odd index values in a given string","text":"<p>Answer: <pre><code>    def remove_odd(input_result):\n        new_string = ''\n        for i in range(len(input_result)):\n            if i % 2 == 0:\n                new_string += input_result[i]\n\n        return new_string\n\n    print(remove_odd(\"Dhruvish\"))\n</code></pre></p>"}]}